{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","props","user","email","name","className","href","TodoInfo","task","useState","completed","isTaskCompleted","setIsTaskCompleted","Card","cn","elevation","sx","minWidth","id","CardContent","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","label","Typography","fontSize","color","gutterBottom","variant","component","title","CardActions","TodoList","tasks","map","username","tasksFromServer","userId","todo","usersFromServer","find","serverUser","App","storageItemsCount","JSON","parse","localStorage","getItem","length","storageSavedTasks","setTasks","titleTask","setTitleTask","taskOwnerName","setTaskOwnerName","taskOwnerId","setTaskOwnerId","taskOwner","setTaskOwner","isTitleEmpty","setIsTitleEmpty","isTaskOwnerEmpty","setIsTaskOwnerEmpty","isTasksSaved","setIsTasksSaved","addNewTask","trim","Object","keys","currentUser","getUserById","newTask","addedTasks","Math","max","prevTasks","setItem","stringify","clear","Grid","container","spacing","item","xs","Paper","action","method","onSubmit","event","preventDefault","TextField","fullWidth","value","helperText","target","FormControl","InputLabel","Select","uId","selectTaskOwner","MenuItem","type","Button","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cf84cb7.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\nexport const UserInfo:React.FC<Props> = (props) => {\n  const { email, name } = props.user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material';\nimport AssignmentLateOutlinedIcon\n  from '@mui/icons-material/AssignmentLateOutlined';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Task } from '../../types/Task';\nimport '../../App.scss';\n\ntype Props = {\n  task: Task\n};\n\nexport const TodoInfo: React.FC<Props> = (props) => {\n  const { task } = props;\n  const [isTaskCompleted, setIsTaskCompleted] = useState(task.completed);\n\n  return (\n    <Card\n      className={cn(isTaskCompleted ? 'completed' : 'not-completed')}\n      elevation={4}\n      sx={{ minWidth: 250 }}\n      key={task.id}\n      data-id={task.id}\n    >\n      <CardContent>\n        <div className=\"checkbox\">\n          <AssignmentLateOutlinedIcon />\n          <FormGroup>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={isTaskCompleted}\n                  onChange={() => {\n                    setIsTaskCompleted(!isTaskCompleted);\n                  }}\n                />\n              )}\n              label=\"Completed\"\n            />\n          </FormGroup>\n        </div>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Task name:\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          {task.title}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <UserInfo user={task.user} />\n      </CardActions>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\nimport { Task } from '../../types/Task';\n\ntype Props = {\n  tasks: Task[],\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { tasks } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {tasks.map(task => (\n        <TodoInfo task={task} key={task.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport {\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  SelectChangeEvent,\n  TextField,\n} from '@mui/material';\n\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Task } from './types/Task';\n\nconst tasksFromServer: Task[] = todosFromServer.map(todo => {\n  const user = usersFromServer\n    .find(serverUser => serverUser.id === todo.userId) || usersFromServer[0];\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nexport const App = () => {\n  const storageItemsCount: number\n    = JSON.parse(localStorage.getItem('tasks') || '{}').length;\n  const storageSavedTasks: Task[]\n    = JSON.parse(localStorage.getItem('tasks') || '{}');\n\n  const [tasks, setTasks] = useState(storageItemsCount > 3\n    ? storageSavedTasks\n    : tasksFromServer);\n  const [titleTask, setTitleTask] = useState('');\n  const [taskOwnerName, setTaskOwnerName] = useState('0');\n  const [taskOwnerId, setTaskOwnerId] = useState(0);\n  const [taskOwner, setTaskOwner] = useState<User | {}>({});\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isTaskOwnerEmpty, setIsTaskOwnerEmpty] = useState(false);\n  const [isTasksSaved, setIsTasksSaved] = useState(true);\n\n  function getUserById(id = 0): User {\n    return usersFromServer.find(user => user.id === id) || usersFromServer[0];\n  }\n\n  function selectTaskOwner(event: SelectChangeEvent<string>) {\n    setIsTaskOwnerEmpty(false);\n    setTaskOwnerName(event.target.value);\n    setTaskOwner({\n      ...usersFromServer\n        .find(user => user.name === event.target.value) || usersFromServer[0],\n    });\n    const uId = usersFromServer.find(user => user.name === event.target.value)\n      || usersFromServer[0];\n\n    setTaskOwnerId(uId.id);\n  }\n\n  function getNextId(addedTasks: Task[]): number {\n    return Math.max(...addedTasks.map(task => task.id)) + 1;\n  }\n\n  function addNewTask() {\n    if (titleTask.trim().length !== 0 && Object.keys(taskOwner).length > 0) {\n      const currentUser = getUserById(taskOwnerId);\n      const newTask: Task = {\n        id: getNextId(tasks),\n        title: titleTask,\n        completed: false,\n        userId: currentUser.id,\n        user: { ...currentUser },\n      };\n\n      setTasks((prevTasks) => {\n        return [\n          newTask,\n          ...prevTasks,\n        ];\n      });\n      setTaskOwnerName('0');\n      setTitleTask('');\n      setTaskOwner({});\n    } else {\n      setTitleTask('');\n      setIsTitleEmpty(titleTask.length === 0);\n      setIsTaskOwnerEmpty(Object.keys(taskOwner).length === 0);\n    }\n  }\n\n  if (isTasksSaved && tasks.length > tasksFromServer.length) {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  } else {\n    localStorage.clear();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <Grid container spacing={4}>\n        <Grid item xs={8}>\n          <Paper>\n            <TodoList tasks={tasks} />\n          </Paper>\n        </Grid>\n        <Grid item xs={4}>\n          <Paper>\n            <form\n              action=\"/api/users\"\n              method=\"POST\"\n              onSubmit={(event) => {\n                addNewTask();\n                event.preventDefault();\n              }}\n            >\n              <div className=\"field\">\n                <TextField\n                  fullWidth\n                  label=\"Enter task title\"\n                  value={titleTask}\n                  helperText={isTitleEmpty && 'Please enter a title'}\n                  onChange={(event) => {\n                    setTitleTask(event.target.value);\n                    setIsTitleEmpty(false);\n                  }}\n                />\n              </div>\n\n              <div className=\"field\">\n                <FormControl fullWidth>\n                  <InputLabel>Task Owner</InputLabel>\n                  <Select\n                    data-cy=\"userSelect\"\n                    value={taskOwnerName}\n                    label=\"Task Owner\"\n                    onChange={(event) => {\n                      selectTaskOwner(event);\n                    }}\n                  >\n                    <MenuItem value=\"0\">Choose a user</MenuItem>\n                    {usersFromServer.map(user => (\n                      <MenuItem\n                        key={user.id}\n                        value={user.name}\n                      >\n                        {user.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                {isTaskOwnerEmpty\n                  && <span className=\"error\">Please choose a user</span>}\n              </div>\n              <label>\n                Save your tasks?\n                <input\n                  type=\"checkbox\"\n                  checked={isTasksSaved}\n                  onChange={() => (\n                    setIsTasksSaved(!isTasksSaved)\n                  )}\n                />\n              </label>\n\n              <Button\n                type=\"submit\"\n                data-cy=\"submitButton\"\n                size=\"medium\"\n                variant=\"contained\"\n              >\n                Add new task\n              </Button>\n            </form>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}