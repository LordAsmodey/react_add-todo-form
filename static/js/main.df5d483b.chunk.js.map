{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","props","user","email","name","className","href","TodoInfo","task","useState","completed","isTaskCompleted","setIsTaskCompleted","Card","cn","elevation","sx","minWidth","id","CardContent","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","label","Typography","fontSize","color","gutterBottom","variant","component","title","CardActions","TodoList","tasks","map","username","tasksFromServer","userId","todo","usersFromServer","find","App","storageItemsCount","JSON","parse","localStorage","getItem","length","storageSavedTasks","setTasks","titleTask","setTitleTask","taskOwnerName","setTaskOwnerName","taskOwner","setTaskOwner","isTitleEmpty","setIsTitleEmpty","isTaskOwnerEmpty","setIsTaskOwnerEmpty","isTasksSaved","setIsTasksSaved","setItem","stringify","clear","Grid","container","spacing","item","xs","Paper","action","method","onSubmit","event","Object","keys","prevTasks","addedTasks","sort","taskOne","taskTwo","preventDefault","TextField","fullWidth","value","helperText","target","FormControl","InputLabel","Select","selectTaskOwner","MenuItem","type","Button","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df5d483b.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\nexport const UserInfo:React.FC<Props> = (props) => {\n  const { email, name } = props.user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material';\n// eslint-disable-next-line max-len\nimport AssignmentLateOutlinedIcon from '@mui/icons-material/AssignmentLateOutlined';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Task } from '../../types/Task';\nimport '../../App.scss';\n\ntype Props = {\n  task: Task\n};\n\nexport const TodoInfo: React.FC<Props> = (props) => {\n  const { task } = props;\n  const [isTaskCompleted, setIsTaskCompleted] = useState(task.completed);\n\n  return (\n    <>\n      <Card\n        className={cn(isTaskCompleted ? 'completed' : 'not-completed')}\n        elevation={4}\n        sx={{ minWidth: 250 }}\n        key={task.id}\n        data-id={task.id}\n      >\n        <CardContent>\n          <div className=\"checkbox\">\n            <AssignmentLateOutlinedIcon />\n            <FormGroup>\n              <FormControlLabel\n                control={(\n                  <Checkbox\n                    checked={isTaskCompleted}\n                    onChange={() => (\n                      setIsTaskCompleted(!isTaskCompleted)\n                    )}\n                  />\n                )}\n                label=\"Completed\"\n              />\n            </FormGroup>\n          </div>\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            Task name:\n          </Typography>\n          <Typography variant=\"h5\" component=\"div\">\n            {task.title}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <UserInfo user={task.user} />\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\nimport { Task } from '../../types/Task';\n\ntype Props = {\n  tasks: Task[],\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { tasks } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {tasks.map(task => (\n        <TodoInfo task={task} key={task.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport {\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  SelectChangeEvent,\n  TextField,\n} from '@mui/material';\n\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Task } from './types/Task';\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst tasksFromServer: Task[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: { ...usersFromServer.find(user => user.id === todo.userId) },\n  };\n});\n\nexport const App = () => {\n  const storageItemsCount: number\n    = JSON.parse(localStorage.getItem('tasks') || '{}').length;\n  const storageSavedTasks: Task[]\n    = JSON.parse(localStorage.getItem('tasks') || '{}');\n\n  const [tasks, setTasks] = useState(storageItemsCount > 3\n    ? storageSavedTasks\n    : tasksFromServer);\n  const [titleTask, setTitleTask] = useState('');\n  const [taskOwnerName, setTaskOwnerName] = useState('0');\n  const [taskOwner, setTaskOwner] = useState<User | {}>({});\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isTaskOwnerEmpty, setIsTaskOwnerEmpty] = useState(false);\n  const [isTasksSaved, setIsTasksSaved] = useState(true);\n\n  function selectTaskOwner(event: SelectChangeEvent<string>) {\n    setIsTaskOwnerEmpty(false);\n    setTaskOwnerName(event.target.value);\n    setTaskOwner({\n      ...usersFromServer\n        .find(user => user.name === event.target.value),\n    });\n  }\n\n  function getNextId(addedTasks: Task[]): number {\n    addedTasks.sort((taskOne, taskTwo) => taskTwo.id - taskOne.id);\n\n    return addedTasks[0].id + 1;\n  }\n\n  function addNewTask() {\n    if (titleTask.length !== 0 && Object.keys(taskOwner).length > 0) {\n      setTasks((prevTasks) => {\n        return [\n          {\n            id: getNextId(tasks),\n            title: titleTask,\n            completed: false,\n            userId: 'id' in taskOwner ? taskOwner.id : 0,\n            user: {\n              id: 'id' in taskOwner ? taskOwner.id : 0,\n              name: 'name' in taskOwner ? taskOwner.name : '',\n              username: 'username' in taskOwner ? taskOwner.username : '',\n              email: 'email' in taskOwner ? taskOwner.email : '',\n            },\n          },\n          ...prevTasks,\n        ];\n      });\n      setTaskOwnerName('0');\n      setTitleTask('');\n      setTaskOwner({});\n    } else {\n      setIsTitleEmpty(titleTask.length === 0);\n      setIsTaskOwnerEmpty(Object.keys(taskOwner).length === 0);\n    }\n  }\n\n  if (isTasksSaved && tasks.length > 3) {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  } else {\n    localStorage.clear();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <Grid container spacing={4}>\n        <Grid item xs={8}>\n          <Paper>\n            <TodoList tasks={tasks} />\n          </Paper>\n        </Grid>\n        <Grid item xs={4}>\n          <Paper>\n            <form\n              action=\"/api/users\"\n              method=\"POST\"\n              onSubmit={(event) => {\n                addNewTask();\n                event.preventDefault();\n              }}\n            >\n              <div className=\"field\">\n                <TextField\n                  fullWidth\n                  label=\"Enter task title\"\n                  value={titleTask}\n                  helperText={isTitleEmpty && 'Please enter a title'}\n                  onChange={(event) => {\n                    setTitleTask(event.target.value);\n                    setIsTitleEmpty(false);\n                  }}\n                />\n              </div>\n\n              <div className=\"field\">\n                <FormControl fullWidth>\n                  <InputLabel>Task Owner</InputLabel>\n                  <Select\n                    data-cy=\"userSelect\"\n                    value={taskOwnerName}\n                    label=\"Task Owner\"\n                    onChange={(event) => selectTaskOwner(event)}\n                  >\n                    <MenuItem value=\"0\">Choose a user</MenuItem>\n                    {usersFromServer.map(user => (\n                      <MenuItem\n                        key={user.id}\n                        value={user.name}\n                      >\n                        {user.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                {isTaskOwnerEmpty\n                  && <span className=\"error\">Please choose a user</span>}\n              </div>\n              <label>\n                Save your tasks?\n                <input\n                  type=\"checkbox\"\n                  checked={isTasksSaved}\n                  onChange={() => (\n                    setIsTasksSaved(!isTasksSaved)\n                  )}\n                />\n              </label>\n\n              <Button\n                type=\"submit\"\n                data-cy=\"submitButton\"\n                size=\"medium\"\n                variant=\"contained\"\n              >\n                Add new task\n              </Button>\n            </form>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}